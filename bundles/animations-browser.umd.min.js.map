{"version":3,"file":"animations-browser.umd.min.js","sources":["../../../../packages/animations/browser/src/render/noop_animation_engine.ts","../../../../packages/animations/browser/src/render/web_animations/web_animations_player.ts","../../../../packages/animations/browser/src/render/web_animations/web_animations_driver.ts","../../../../packages/animations/browser/src/animation_engine.ts","../../../../packages/animations/browser/src/util.ts","../../../../packages/animations/browser/src/dsl/animation_transition_expr.ts","../../../../packages/animations/browser/src/dsl/animation_timeline_visitor.ts","../../../../packages/animations/browser/src/dsl/animation_transition_factory.ts","../../../../packages/animations/browser/src/dsl/animation_validator_visitor.ts","../../../../packages/animations/browser/src/dsl/animation_trigger.ts","../../../../packages/animations/browser/src/render/dom_animation_engine.ts","../../../../packages/animations/browser/src/dsl/animation.ts","../../../../packages/animations/browser/src/dsl/style_normalization/web_animations_style_normalizer.ts","../../../../packages/animations/browser/src/dsl/animation_transition_instruction.ts","../../../../packages/animations/browser/src/render/animation_driver.ts","../../../../packages/animations/browser/src/dsl/animation_dsl_visitor.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent, AnimationMetadataType, AnimationPlayer, AnimationStateMetadata, AnimationTriggerMetadata, ɵStyleData} from '@angular/animations';\n\nimport {AnimationEngine} from '../animation_engine';\nimport {copyStyles, eraseStyles, normalizeStyles, setStyles} from '../util';\n\ninterface ListenerTuple {\n  eventPhase: string;\n  triggerName: string;\n  callback: (event: any) => any;\n  doRemove?: boolean;\n}\n\ninterface ChangeTuple {\n  element: any;\n  triggerName: string;\n  oldValue: string;\n  newValue: string;\n}\n\nconst /** @type {?} */ DEFAULT_STATE_VALUE = 'void';\nconst /** @type {?} */ DEFAULT_STATE_STYLES = '*';\nexport class NoopAnimationEngine extends AnimationEngine {\nprivate _listeners = new Map<any, ListenerTuple[]>();\nprivate _changes: ChangeTuple[] = [];\nprivate _flaggedRemovals = new Set<any>();\nprivate _onDoneFns: (() => any)[] = [];\nprivate _triggerStyles: {[triggerName: string]: {[stateName: string]: ɵStyleData}} =\n      Object.create(null);\n/**\n * @param {?} trigger\n * @param {?=} name\n * @return {?}\n */\nregisterTrigger(trigger: AnimationTriggerMetadata, name: string = null): void {\n    name = name || trigger.name;\n    if (this._triggerStyles[name]) {\n      return;\n    }\n    const /** @type {?} */ stateMap: {[stateName: string]: ɵStyleData} = {};\n    trigger.definitions.forEach(def => {\n      if (def.type === AnimationMetadataType.State) {\n        const /** @type {?} */ stateDef = /** @type {?} */(( def as AnimationStateMetadata));\n        stateMap[stateDef.name] = normalizeStyles(stateDef.styles.styles);\n      }\n    });\n    this._triggerStyles[name] = stateMap;\n  }\n/**\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonInsert(element: any, domFn: () => any): void { domFn(); }\n/**\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonRemove(element: any, domFn: () => any): void {\n    domFn();\n    this._flaggedRemovals.add(element);\n  }\n/**\n * @param {?} element\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nsetProperty(element: any, property: string, value: any): void {\n    const /** @type {?} */ storageProp = makeStorageProp(property);\n    const /** @type {?} */ oldValue = element[storageProp] || DEFAULT_STATE_VALUE;\n    this._changes.push( /** @type {?} */((<ChangeTuple>{element, oldValue, newValue: value, triggerName: property})));\n\n    const /** @type {?} */ triggerStateStyles = this._triggerStyles[property] || {};\n    const /** @type {?} */ fromStateStyles =\n        triggerStateStyles[oldValue] || triggerStateStyles[DEFAULT_STATE_STYLES];\n    if (fromStateStyles) {\n      eraseStyles(element, fromStateStyles);\n    }\n\n    element[storageProp] = value;\n    this._onDoneFns.push(() => {\n      const /** @type {?} */ toStateStyles = triggerStateStyles[value] || triggerStateStyles[DEFAULT_STATE_STYLES];\n      if (toStateStyles) {\n        setStyles(element, toStateStyles);\n      }\n    });\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} eventPhase\n * @param {?} callback\n * @return {?}\n */\nlisten(element: any, eventName: string, eventPhase: string, callback: (event: any) => any):\n      () => any {\n    let /** @type {?} */ listeners = this._listeners.get(element);\n    if (!listeners) {\n      this._listeners.set(element, listeners = []);\n    }\n\n    const /** @type {?} */ tuple = /** @type {?} */(( <ListenerTuple>{triggerName: eventName, eventPhase, callback}));\n    listeners.push(tuple);\n\n    return () => tuple.doRemove = true;\n  }\n/**\n * @return {?}\n */\nflush(): void {\n    const /** @type {?} */ onStartCallbacks: (() => any)[] = [];\n    const /** @type {?} */ onDoneCallbacks: (() => any)[] = [];\n/**\n * @param {?} listener\n * @param {?} data\n * @return {?}\n */\nfunction handleListener(listener: ListenerTuple, data: ChangeTuple) {\n      const /** @type {?} */ phase = listener.eventPhase;\n      const /** @type {?} */ event = makeAnimationEvent(\n          data.element, data.triggerName, data.oldValue, data.newValue, phase, 0);\n      if (phase == 'start') {\n        onStartCallbacks.push(() => listener.callback(event));\n      } else if (phase == 'done') {\n        onDoneCallbacks.push(() => listener.callback(event));\n      }\n    }\n\n    this._changes.forEach(change => {\n      const /** @type {?} */ element = change.element;\n      const /** @type {?} */ listeners = this._listeners.get(element);\n      if (listeners) {\n        listeners.forEach(listener => {\n          if (listener.triggerName == change.triggerName) {\n            handleListener(listener, change);\n          }\n        });\n      }\n    });\n\n    // upon removal ALL the animation triggers need to get fired\n    this._flaggedRemovals.forEach(element => {\n      const /** @type {?} */ listeners = this._listeners.get(element);\n      if (listeners) {\n        listeners.forEach(listener => {\n          const /** @type {?} */ triggerName = listener.triggerName;\n          const /** @type {?} */ storageProp = makeStorageProp(triggerName);\n          handleListener(listener, /** @type {?} */(( <ChangeTuple>{\n            element: element,\n            triggerName: triggerName,\n            oldValue: element[storageProp] || DEFAULT_STATE_VALUE,\n            newValue: DEFAULT_STATE_VALUE\n          })));\n        });\n      }\n    });\n\n    // remove all the listeners after everything is complete\n    Array.from(this._listeners.keys()).forEach(element => {\n      const /** @type {?} */ listenersToKeep = this._listeners.get(element).filter(l => !l.doRemove);\n      if (listenersToKeep.length) {\n        this._listeners.set(element, listenersToKeep);\n      } else {\n        this._listeners.delete(element);\n      }\n    });\n\n    onStartCallbacks.forEach(fn => fn());\n    onDoneCallbacks.forEach(fn => fn());\n    this._flaggedRemovals.clear();\n    this._changes = [];\n\n    this._onDoneFns.forEach(doneFn => doneFn());\n    this._onDoneFns = [];\n  }\n/**\n * @return {?}\n */\nget activePlayers(): AnimationPlayer[] { return []; }\n/**\n * @return {?}\n */\nget queuedPlayers(): AnimationPlayer[] { return []; }\n}\n\nfunction NoopAnimationEngine_tsickle_Closure_declarations() {\n/** @type {?} */\nNoopAnimationEngine.prototype._listeners;\n/** @type {?} */\nNoopAnimationEngine.prototype._changes;\n/** @type {?} */\nNoopAnimationEngine.prototype._flaggedRemovals;\n/** @type {?} */\nNoopAnimationEngine.prototype._onDoneFns;\n/** @type {?} */\nNoopAnimationEngine.prototype._triggerStyles;\n}\n\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} phaseName\n * @param {?} totalTime\n * @return {?}\n */\nfunction makeAnimationEvent(\n    element: any, triggerName: string, fromState: string, toState: string, phaseName: string,\n    totalTime: number): AnimationEvent {\n  return /** @type {?} */(( <AnimationEvent>{element, triggerName, fromState, toState, phaseName, totalTime}));\n}\n/**\n * @param {?} property\n * @return {?}\n */\nfunction makeStorageProp(property: string): string {\n  return '_@_' + property;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AUTO_STYLE, AnimationPlayer} from '@angular/animations';\nimport {DOMAnimation} from './dom_animation';\nexport class WebAnimationsPlayer implements AnimationPlayer {\nprivate _onDoneFns: Function[] = [];\nprivate _onStartFns: Function[] = [];\nprivate _onDestroyFns: Function[] = [];\nprivate _player: DOMAnimation;\nprivate _duration: number;\nprivate _delay: number;\nprivate _initialized = false;\nprivate _finished = false;\nprivate _started = false;\nprivate _destroyed = false;\nprivate _finalKeyframe: {[key: string]: string | number};\npublic time = 0;\npublic parentPlayer: AnimationPlayer = null;\npublic previousStyles: {[styleName: string]: string | number};\n/**\n * @param {?} element\n * @param {?} keyframes\n * @param {?} options\n * @param {?=} previousPlayers\n */\nconstructor(\npublic element: any,\npublic keyframes: {[key: string]: string | number}[],\npublic options: {[key: string]: string | number},\n      previousPlayers: WebAnimationsPlayer[] = []) {\n    this._duration = <number>options['duration'];\n    this._delay = <number>options['delay'] || 0;\n    this.time = this._duration + this._delay;\n\n    this.previousStyles = {};\n    previousPlayers.forEach(player => {\n      let styles = player._captureStyles();\n      Object.keys(styles).forEach(prop => this.previousStyles[prop] = styles[prop]);\n    });\n  }\n/**\n * @return {?}\n */\nprivate _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n/**\n * @return {?}\n */\ninit(): void {\n    if (this._initialized) return;\n    this._initialized = true;\n\n    const /** @type {?} */ keyframes = this.keyframes.map(styles => {\n      const /** @type {?} */ formattedKeyframe: {[key: string]: string | number} = {};\n      Object.keys(styles).forEach((prop, index) => {\n        let /** @type {?} */ value = styles[prop];\n        if (value == AUTO_STYLE) {\n          value = _computeStyle(this.element, prop);\n        }\n        if (value != undefined) {\n          formattedKeyframe[prop] = value;\n        }\n      });\n      return formattedKeyframe;\n    });\n\n    const /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);\n    if (previousStyleProps.length) {\n      let /** @type {?} */ startingKeyframe = keyframes[0];\n      let /** @type {?} */ missingStyleProps: string[] = [];\n      previousStyleProps.forEach(prop => {\n        if (startingKeyframe[prop] != null) {\n          missingStyleProps.push(prop);\n        }\n        startingKeyframe[prop] = this.previousStyles[prop];\n      });\n\n      if (missingStyleProps.length) {\n        const /** @type {?} */ self = this;\n        // tslint:disable-next-line\n        for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {\n          let /** @type {?} */ kf = keyframes[i];\n          missingStyleProps.forEach(function(prop) {\n            kf[prop] = _computeStyle(self.element, prop);\n          });\n        }\n      }\n    }\n\n    this._player = this._triggerWebAnimation(this.element, keyframes, this.options);\n    this._finalKeyframe =\n        keyframes.length ? _copyKeyframeStyles(keyframes[keyframes.length - 1]) : {};\n\n    // this is required so that the player doesn't start to animate right away\n    this._resetDomPlayerState();\n    this._player.addEventListener('finish', () => this._onFinish());\n  }\n/**\n * \\@internal\n * @param {?} element\n * @param {?} keyframes\n * @param {?} options\n * @return {?}\n */\n_triggerWebAnimation(element: any, keyframes: any[], options: any): DOMAnimation {\n    // jscompiler doesn't seem to know animate is a native property because it's not fully\n    // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n    return /** @type {?} */(( <DOMAnimation>element['animate'](keyframes, options)));\n  }\n/**\n * @return {?}\n */\nget domPlayer() { return this._player; }\n/**\n * @param {?} fn\n * @return {?}\n */\nonStart(fn: () => void): void { this._onStartFns.push(fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDone(fn: () => void): void { this._onDoneFns.push(fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDestroy(fn: () => void): void { this._onDestroyFns.push(fn); }\n/**\n * @return {?}\n */\nplay(): void {\n    this.init();\n    if (!this.hasStarted()) {\n      this._onStartFns.forEach(fn => fn());\n      this._onStartFns = [];\n      this._started = true;\n    }\n    this._player.play();\n  }\n/**\n * @return {?}\n */\npause(): void {\n    this.init();\n    this._player.pause();\n  }\n/**\n * @return {?}\n */\nfinish(): void {\n    this.init();\n    this._onFinish();\n    this._player.finish();\n  }\n/**\n * @return {?}\n */\nreset(): void {\n    this._resetDomPlayerState();\n    this._destroyed = false;\n    this._finished = false;\n    this._started = false;\n  }\n/**\n * @return {?}\n */\nprivate _resetDomPlayerState() {\n    if (this._player) {\n      this._player.cancel();\n    }\n  }\n/**\n * @return {?}\n */\nrestart(): void {\n    this.reset();\n    this.play();\n  }\n/**\n * @return {?}\n */\nhasStarted(): boolean { return this._started; }\n/**\n * @return {?}\n */\ndestroy(): void {\n    if (!this._destroyed) {\n      this._resetDomPlayerState();\n      this._onFinish();\n      this._destroyed = true;\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n/**\n * @param {?} p\n * @return {?}\n */\nsetPosition(p: number): void { this._player.currentTime = p * this.time; }\n/**\n * @return {?}\n */\ngetPosition(): number { return this._player.currentTime / this.time; }\n/**\n * @return {?}\n */\nprivate _captureStyles(): {[prop: string]: string | number} {\n    const /** @type {?} */ styles: {[key: string]: string | number} = {};\n    if (this.hasStarted()) {\n      Object.keys(this._finalKeyframe).forEach(prop => {\n        if (prop != 'offset') {\n          styles[prop] =\n              this._finished ? this._finalKeyframe[prop] : _computeStyle(this.element, prop);\n        }\n      });\n    }\n\n    return styles;\n  }\n}\n\nfunction WebAnimationsPlayer_tsickle_Closure_declarations() {\n/** @type {?} */\nWebAnimationsPlayer.prototype._onDoneFns;\n/** @type {?} */\nWebAnimationsPlayer.prototype._onStartFns;\n/** @type {?} */\nWebAnimationsPlayer.prototype._onDestroyFns;\n/** @type {?} */\nWebAnimationsPlayer.prototype._player;\n/** @type {?} */\nWebAnimationsPlayer.prototype._duration;\n/** @type {?} */\nWebAnimationsPlayer.prototype._delay;\n/** @type {?} */\nWebAnimationsPlayer.prototype._initialized;\n/** @type {?} */\nWebAnimationsPlayer.prototype._finished;\n/** @type {?} */\nWebAnimationsPlayer.prototype._started;\n/** @type {?} */\nWebAnimationsPlayer.prototype._destroyed;\n/** @type {?} */\nWebAnimationsPlayer.prototype._finalKeyframe;\n/** @type {?} */\nWebAnimationsPlayer.prototype.time;\n/** @type {?} */\nWebAnimationsPlayer.prototype.parentPlayer;\n/** @type {?} */\nWebAnimationsPlayer.prototype.previousStyles;\n/** @type {?} */\nWebAnimationsPlayer.prototype.element;\n/** @type {?} */\nWebAnimationsPlayer.prototype.keyframes;\n/** @type {?} */\nWebAnimationsPlayer.prototype.options;\n}\n\n/**\n * @param {?} element\n * @param {?} prop\n * @return {?}\n */\nfunction _computeStyle(element: any, prop: string): string {\n  return ( /** @type {?} */((<any>window.getComputedStyle(element))))[prop];\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction _copyKeyframeStyles(styles: {[style: string]: string | number}):\n    {[style: string]: string | number} {\n  const /** @type {?} */ newStyles: {[style: string]: string | number} = {};\n  Object.keys(styles).forEach(prop => {\n    if (prop != 'offset') {\n      newStyles[prop] = styles[prop];\n    }\n  });\n  return newStyles;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationPlayer, ɵStyleData} from '@angular/animations';\n\nimport {AnimationDriver} from '../animation_driver';\n\nimport {WebAnimationsPlayer} from './web_animations_player';\nexport class WebAnimationsDriver implements AnimationDriver {\n/**\n * @param {?} element\n * @param {?} keyframes\n * @param {?} duration\n * @param {?} delay\n * @param {?} easing\n * @param {?=} previousPlayers\n * @return {?}\n */\nanimate(\n      element: any, keyframes: ɵStyleData[], duration: number, delay: number, easing: string,\n      previousPlayers: AnimationPlayer[] = []): WebAnimationsPlayer {\n    const /** @type {?} */ playerOptions: {[key: string]: string |\n                              number} = {'duration': duration, 'delay': delay, 'fill': 'forwards'};\n\n    // we check for this to avoid having a null|undefined value be present\n    // for the easing (which results in an error for certain browsers #9752)\n    if (easing) {\n      playerOptions['easing'] = easing;\n    }\n\n    const /** @type {?} */ previousWebAnimationPlayers = /** @type {?} */(( <WebAnimationsPlayer[]>previousPlayers.filter(\n        player => { return player instanceof WebAnimationsPlayer; })));\n    return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);\n  }\n}\n/**\n * @return {?}\n */\nexport function supportsWebAnimations() {\n  return typeof Element !== 'undefined' && typeof( /** @type {?} */((<any>Element))).prototype['animate'] === 'function';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationPlayer, AnimationTriggerMetadata} from '@angular/animations';\n/**\n * @abstract\n */\nexport abstract class AnimationEngine {\n/**\n * @abstract\n * @param {?} trigger\n * @param {?=} name\n * @return {?}\n */\nregisterTrigger(trigger: AnimationTriggerMetadata, name?: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonInsert(element: any, domFn: () => any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonRemove(element: any, domFn: () => any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nsetProperty(element: any, property: string, value: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} eventName\n * @param {?} eventPhase\n * @param {?} callback\n * @return {?}\n */\nlisten(\n      element: any, eventName: string, eventPhase: string,\n      callback: (event: any) => any) {}\n/**\n * @abstract\n * @return {?}\n */\nflush() {}\n/**\n * @return {?}\n */\nget activePlayers(): AnimationPlayer[] { throw new Error('...'); }\n/**\n * @return {?}\n */\nget queuedPlayers(): AnimationPlayer[] { throw new Error('...'); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimateTimings, ɵStyleData} from '@angular/animations';\n\nexport const /** @type {?} */ ONE_SECOND = 1000;\n/**\n * @param {?} exp\n * @param {?} errors\n * @return {?}\n */\nexport function parseTimeExpression(exp: string | number, errors: string[]): AnimateTimings {\n  const /** @type {?} */ regex = /^([\\.\\d]+)(m?s)(?:\\s+([\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i;\n  let /** @type {?} */ duration: number;\n  let /** @type {?} */ delay: number = 0;\n  let /** @type {?} */ easing: string = null;\n  if (typeof exp === 'string') {\n    const /** @type {?} */ matches = exp.match(regex);\n    if (matches === null) {\n      errors.push(`The provided timing value \"${exp}\" is invalid.`);\n      return {duration: 0, delay: 0, easing: null};\n    }\n\n    let /** @type {?} */ durationMatch = parseFloat(matches[1]);\n    const /** @type {?} */ durationUnit = matches[2];\n    if (durationUnit == 's') {\n      durationMatch *= ONE_SECOND;\n    }\n    duration = Math.floor(durationMatch);\n\n    const /** @type {?} */ delayMatch = matches[3];\n    const /** @type {?} */ delayUnit = matches[4];\n    if (delayMatch != null) {\n      let /** @type {?} */ delayVal: number = parseFloat(delayMatch);\n      if (delayUnit != null && delayUnit == 's') {\n        delayVal *= ONE_SECOND;\n      }\n      delay = Math.floor(delayVal);\n    }\n\n    const /** @type {?} */ easingVal = matches[5];\n    if (easingVal) {\n      easing = easingVal;\n    }\n  } else {\n    duration = /** @type {?} */(( <number>exp));\n  }\n\n  return {duration, delay, easing};\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nexport function normalizeStyles(styles: ɵStyleData | ɵStyleData[]): ɵStyleData {\n  const /** @type {?} */ normalizedStyles: ɵStyleData = {};\n  if (Array.isArray(styles)) {\n    styles.forEach(data => copyStyles(data, false, normalizedStyles));\n  } else {\n    copyStyles(styles, false, normalizedStyles);\n  }\n  return normalizedStyles;\n}\n/**\n * @param {?} styles\n * @param {?} readPrototype\n * @param {?=} destination\n * @return {?}\n */\nexport function copyStyles(\n    styles: ɵStyleData, readPrototype: boolean, destination: ɵStyleData = {}): ɵStyleData {\n  if (readPrototype) {\n    // we make use of a for-in loop so that the\n    // prototypically inherited properties are\n    // revealed from the backFill map\n    for (let /** @type {?} */ prop in styles) {\n      destination[prop] = styles[prop];\n    }\n  } else {\n    Object.keys(styles).forEach(prop => destination[prop] = styles[prop]);\n  }\n  return destination;\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nexport function setStyles(element: any, styles: ɵStyleData) {\n  if (element['style']) {\n    Object.keys(styles).forEach(prop => element.style[prop] = styles[prop]);\n  }\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nexport function eraseStyles(element: any, styles: ɵStyleData) {\n  if (element['style']) {\n    Object.keys(styles).forEach(prop => {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      element.style[prop] = '';\n    });\n  }\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const ANY_STATE = '*';\nexport declare type TransitionMatcherFn = (fromState: any, toState: any) => boolean;\n/**\n * @param {?} transitionValue\n * @param {?} errors\n * @return {?}\n */\nexport function parseTransitionExpr(\n    transitionValue: string | TransitionMatcherFn, errors: string[]): TransitionMatcherFn[] {\n  const /** @type {?} */ expressions: TransitionMatcherFn[] = [];\n  if (typeof transitionValue == 'string') {\n    ( /** @type {?} */((<string>transitionValue)))\n        .split(/\\s*,\\s*/)\n        .forEach(str => parseInnerTransitionStr(str, expressions, errors));\n  } else {\n    expressions.push( /** @type {?} */((<TransitionMatcherFn>transitionValue)));\n  }\n  return expressions;\n}\n/**\n * @param {?} eventStr\n * @param {?} expressions\n * @param {?} errors\n * @return {?}\n */\nfunction parseInnerTransitionStr(\n    eventStr: string, expressions: TransitionMatcherFn[], errors: string[]) {\n  if (eventStr[0] == ':') {\n    eventStr = parseAnimationAlias(eventStr, errors);\n  }\n  const /** @type {?} */ match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n  if (match == null || match.length < 4) {\n    errors.push(`The provided transition expression \"${eventStr}\" is not supported`);\n    return expressions;\n  }\n\n  const /** @type {?} */ fromState = match[1];\n  const /** @type {?} */ separator = match[2];\n  const /** @type {?} */ toState = match[3];\n  expressions.push(makeLambdaFromStates(fromState, toState));\n\n  const /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n  if (separator[0] == '<' && !isFullAnyStateExpr) {\n    expressions.push(makeLambdaFromStates(toState, fromState));\n  }\n}\n/**\n * @param {?} alias\n * @param {?} errors\n * @return {?}\n */\nfunction parseAnimationAlias(alias: string, errors: string[]): string {\n  switch (alias) {\n    case ':enter':\n      return 'void => *';\n    case ':leave':\n      return '* => void';\n    default:\n      errors.push(`The transition alias value \"${alias}\" is not supported`);\n      return '* => *';\n  }\n}\n/**\n * @param {?} lhs\n * @param {?} rhs\n * @return {?}\n */\nfunction makeLambdaFromStates(lhs: string, rhs: string): TransitionMatcherFn {\n  return (fromState: any, toState: any): boolean => {\n    const /** @type {?} */ lhsMatch = lhs == ANY_STATE || lhs == fromState;\n    const /** @type {?} */ rhsMatch = rhs == ANY_STATE || rhs == toState;\n    return lhsMatch && rhsMatch;\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AUTO_STYLE, AnimateTimings, AnimationAnimateMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationSequenceMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, sequence, style, ɵStyleData} from '@angular/animations';\n\nimport {copyStyles, normalizeStyles, parseTimeExpression} from '../util';\n\nimport {AnimationDslVisitor, visitAnimationNode} from './animation_dsl_visitor';\nimport {AnimationTimelineInstruction, createTimelineInstruction} from './animation_timeline_instruction';\n/**\n * @param {?} ast\n * @param {?=} startingStyles\n * @param {?=} finalStyles\n * @return {?}\n */\nexport function buildAnimationKeyframes(\n    ast: AnimationMetadata | AnimationMetadata[], startingStyles: ɵStyleData = {},\n    finalStyles: ɵStyleData = {}): AnimationTimelineInstruction[] {\n  const /** @type {?} */ normalizedAst =\n      Array.isArray(ast) ? sequence( /** @type {?} */((<AnimationMetadata[]>ast))) : /** @type {?} */(( <AnimationMetadata>ast));\n  return new AnimationTimelineVisitor().buildKeyframes(normalizedAst, startingStyles, finalStyles);\n}\n\nexport declare type StyleAtTime = {\n  time: number; value: string | number;\n};\nexport class AnimationTimelineContext {\n  currentTimeline: TimelineBuilder;\n  currentAnimateTimings: AnimateTimings;\n  previousNode: AnimationMetadata = /** @type {?} */(( <AnimationMetadata>{}));\n  subContextCount = 0;\n/**\n * @param {?} errors\n * @param {?} timelines\n * @param {?=} initialTimeline\n */\nconstructor(\npublic errors: any[],\npublic timelines: TimelineBuilder[],\n      initialTimeline: TimelineBuilder = null) {\n    this.currentTimeline = initialTimeline || new TimelineBuilder(0);\n    timelines.push(this.currentTimeline);\n  }\n/**\n * @return {?}\n */\ncreateSubContext(): AnimationTimelineContext {\n    const /** @type {?} */ context =\n        new AnimationTimelineContext(this.errors, this.timelines, this.currentTimeline.fork());\n    context.previousNode = this.previousNode;\n    context.currentAnimateTimings = this.currentAnimateTimings;\n    this.subContextCount++;\n    return context;\n  }\n/**\n * @param {?=} newTime\n * @return {?}\n */\ntransformIntoNewTimeline(newTime = 0) {\n    this.currentTimeline = this.currentTimeline.fork(newTime);\n    this.timelines.push(this.currentTimeline);\n    return this.currentTimeline;\n  }\n/**\n * @param {?} time\n * @return {?}\n */\nincrementTime(time: number) {\n    this.currentTimeline.forwardTime(this.currentTimeline.duration + time);\n  }\n}\n\nfunction AnimationTimelineContext_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTimelineContext.prototype.currentTimeline;\n/** @type {?} */\nAnimationTimelineContext.prototype.currentAnimateTimings;\n/** @type {?} */\nAnimationTimelineContext.prototype.previousNode;\n/** @type {?} */\nAnimationTimelineContext.prototype.subContextCount;\n/** @type {?} */\nAnimationTimelineContext.prototype.errors;\n/** @type {?} */\nAnimationTimelineContext.prototype.timelines;\n}\n\nexport class AnimationTimelineVisitor implements AnimationDslVisitor {\n/**\n * @param {?} ast\n * @param {?} startingStyles\n * @param {?} finalStyles\n * @return {?}\n */\nbuildKeyframes(ast: AnimationMetadata, startingStyles: ɵStyleData, finalStyles: ɵStyleData):\n      AnimationTimelineInstruction[] {\n    const /** @type {?} */ context = new AnimationTimelineContext([], []);\n    context.currentTimeline.setStyles(startingStyles);\n\n    visitAnimationNode(this, ast, context);\n    const /** @type {?} */ normalizedFinalStyles = copyStyles(finalStyles, true);\n\n    // this is a special case for when animate(TIME) is used (without any styles)\n    // thus indicating to create an animation arc between the final keyframe and\n    // the destination styles. When this occurs we need to ensure that the styles\n    // that are missing on the finalStyles map are set to AUTO\n    if (Object.keys(context.currentTimeline.getFinalKeyframe()).length == 0) {\n      context.currentTimeline.properties.forEach(prop => {\n        const /** @type {?} */ val = normalizedFinalStyles[prop];\n        if (val == null) {\n          normalizedFinalStyles[prop] = AUTO_STYLE;\n        }\n      });\n    }\n\n    context.currentTimeline.setStyles(normalizedFinalStyles);\n    const /** @type {?} */ timelineInstructions: AnimationTimelineInstruction[] = [];\n    context.timelines.forEach(timeline => {\n      // this checks to see if an actual animation happened\n      if (timeline.hasStyling()) {\n        timelineInstructions.push(timeline.buildKeyframes());\n      }\n    });\n\n    if (timelineInstructions.length == 0) {\n      timelineInstructions.push(createTimelineInstruction([], 0, 0, ''));\n    }\n    return timelineInstructions;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitState(ast: AnimationStateMetadata, context: any): any {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitTransition(ast: AnimationTransitionMetadata, context: any): any {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSequence(ast: AnimationSequenceMetadata, context: AnimationTimelineContext) {\n    const /** @type {?} */ subContextCount = context.subContextCount;\n    if (context.previousNode.type == AnimationMetadataType.Style) {\n      context.currentTimeline.forwardFrame();\n      context.currentTimeline.snapshotCurrentStyles();\n    }\n\n    ast.steps.forEach(s => visitAnimationNode(this, s, context));\n\n    // this means that some animation function within the sequence\n    // ended up creating a sub timeline (which means the current\n    // timeline cannot overlap with the contents of the sequence)\n    if (context.subContextCount > subContextCount) {\n      context.transformIntoNewTimeline();\n    }\n\n    context.previousNode = ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitGroup(ast: AnimationGroupMetadata, context: AnimationTimelineContext) {\n    const /** @type {?} */ innerTimelines: TimelineBuilder[] = [];\n    let /** @type {?} */ furthestTime = context.currentTimeline.currentTime;\n    ast.steps.forEach(s => {\n      const /** @type {?} */ innerContext = context.createSubContext();\n      visitAnimationNode(this, s, innerContext);\n      furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);\n      innerTimelines.push(innerContext.currentTimeline);\n    });\n\n    // this operation is run after the AST loop because otherwise\n    // if the parent timeline's collected styles were updated then\n    // it would pass in invalid data into the new-to-be forked items\n    innerTimelines.forEach(\n        timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline));\n    context.transformIntoNewTimeline(furthestTime);\n    context.previousNode = ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitAnimate(ast: AnimationAnimateMetadata, context: AnimationTimelineContext) {\n    const /** @type {?} */ timings = ast.timings.hasOwnProperty('duration') ? /** @type {?} */((\n        <AnimateTimings>ast.timings)) :\n        parseTimeExpression( /** @type {?} */((<string|number>ast.timings)), context.errors);\n    context.currentAnimateTimings = timings;\n\n    if (timings.delay) {\n      context.incrementTime(timings.delay);\n      context.currentTimeline.snapshotCurrentStyles();\n    }\n\n    const /** @type {?} */ astType = ast.styles ? ast.styles.type : -1;\n    if (astType == AnimationMetadataType.KeyframeSequence) {\n      this.visitKeyframeSequence( /** @type {?} */((<AnimationKeyframesSequenceMetadata>ast.styles)), context);\n    } else {\n      let /** @type {?} */ styleAst = /** @type {?} */(( ast.styles as AnimationStyleMetadata));\n      if (!styleAst && timings.easing) {\n        styleAst = style({easing: timings.easing});\n      }\n      context.incrementTime(timings.duration);\n      if (styleAst) {\n        this.visitStyle(styleAst, context);\n      }\n    }\n\n    context.currentAnimateTimings = null;\n    context.previousNode = ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitStyle(ast: AnimationStyleMetadata, context: AnimationTimelineContext) {\n    // this is a special case when a style() call is issued directly after\n    // a call to animate(). If the clock is not forwarded by one frame then\n    // the style() calls will be merged into the previous animate() call\n    // which is incorrect.\n    if (!context.currentAnimateTimings &&\n        context.previousNode.type == AnimationMetadataType.Animate) {\n      context.currentTimeline.forwardFrame();\n    }\n\n    const /** @type {?} */ normalizedStyles = normalizeStyles(ast.styles);\n    const /** @type {?} */ easing = context.currentAnimateTimings && context.currentAnimateTimings.easing;\n    this._applyStyles(normalizedStyles, easing, context);\n    context.previousNode = ast;\n  }\n/**\n * @param {?} styles\n * @param {?} easing\n * @param {?} context\n * @return {?}\n */\nprivate _applyStyles(styles: ɵStyleData, easing: string, context: AnimationTimelineContext) {\n    if (styles.hasOwnProperty('easing')) {\n      easing = easing || /** @type {?} */(( styles['easing'] as string));\n      delete styles['easing'];\n    }\n    context.currentTimeline.setStyles(styles, easing);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyframeSequence(\n      ast: AnimationKeyframesSequenceMetadata, context: AnimationTimelineContext) {\n    const /** @type {?} */ MAX_KEYFRAME_OFFSET = 1;\n    const /** @type {?} */ limit = ast.steps.length - 1;\n    const /** @type {?} */ firstKeyframe = ast.steps[0];\n\n    let /** @type {?} */ offsetGap = 0;\n    const /** @type {?} */ containsOffsets = getOffset(firstKeyframe) != null;\n    if (!containsOffsets) {\n      offsetGap = MAX_KEYFRAME_OFFSET / limit;\n    }\n\n    const /** @type {?} */ startTime = context.currentTimeline.duration;\n    const /** @type {?} */ duration = context.currentAnimateTimings.duration;\n    const /** @type {?} */ innerContext = context.createSubContext();\n    const /** @type {?} */ innerTimeline = innerContext.currentTimeline;\n    innerTimeline.easing = context.currentAnimateTimings.easing;\n\n    ast.steps.forEach((step: AnimationStyleMetadata, i: number) => {\n      const /** @type {?} */ normalizedStyles = normalizeStyles(step.styles);\n      const /** @type {?} */ offset = containsOffsets ?\n          (step.offset != null ? step.offset : parseFloat( /** @type {?} */((normalizedStyles['offset'] as string)))) :\n          (i == limit ? MAX_KEYFRAME_OFFSET : i * offsetGap);\n      innerTimeline.forwardTime(offset * duration);\n      this._applyStyles(normalizedStyles, null, innerContext);\n    });\n\n    // this will ensure that the parent timeline gets all the styles from\n    // the child even if the new timeline below is not used\n    context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);\n\n    // we do this because the window between this timeline and the sub timeline\n    // should ensure that the styles within are exactly the same as they were before\n    context.transformIntoNewTimeline(startTime + duration);\n    context.previousNode = ast;\n  }\n}\nexport class TimelineBuilder {\npublic duration: number = 0;\npublic easing: string = '';\nprivate _previousKeyframe: ɵStyleData = {};\nprivate _currentKeyframe: ɵStyleData;\nprivate _keyframes = new Map<number, ɵStyleData>();\nprivate _styleSummary: {[prop: string]: StyleAtTime} = {};\nprivate _localTimelineStyles: ɵStyleData;\nprivate _backFill: ɵStyleData = {};\n/**\n * @param {?} startTime\n * @param {?=} _globalTimelineStyles\n */\nconstructor(public startTime: number,\nprivate _globalTimelineStyles: ɵStyleData = null) {\n    this._localTimelineStyles = Object.create(this._backFill, {});\n    if (!this._globalTimelineStyles) {\n      this._globalTimelineStyles = this._localTimelineStyles;\n    }\n    this._loadKeyframe();\n  }\n/**\n * @return {?}\n */\nhasStyling(): boolean { return this._keyframes.size > 1; }\n/**\n * @return {?}\n */\nget currentTime() { return this.startTime + this.duration; }\n/**\n * @param {?=} currentTime\n * @return {?}\n */\nfork(currentTime = 0): TimelineBuilder {\n    return new TimelineBuilder(currentTime || this.currentTime, this._globalTimelineStyles);\n  }\n/**\n * @return {?}\n */\nprivate _loadKeyframe() {\n    if (this._currentKeyframe) {\n      this._previousKeyframe = this._currentKeyframe;\n    }\n    this._currentKeyframe = this._keyframes.get(this.duration);\n    if (!this._currentKeyframe) {\n      this._currentKeyframe = Object.create(this._backFill, {});\n      this._keyframes.set(this.duration, this._currentKeyframe);\n    }\n  }\n/**\n * @return {?}\n */\nforwardFrame() {\n    this.duration++;\n    this._loadKeyframe();\n  }\n/**\n * @param {?} time\n * @return {?}\n */\nforwardTime(time: number) {\n    this.duration = time;\n    this._loadKeyframe();\n  }\n/**\n * @param {?} prop\n * @param {?} value\n * @return {?}\n */\nprivate _updateStyle(prop: string, value: string|number) {\n    this._localTimelineStyles[prop] = value;\n    this._globalTimelineStyles[prop] = value;\n    this._styleSummary[prop] = {time: this.currentTime, value};\n  }\n/**\n * @param {?} styles\n * @param {?=} easing\n * @return {?}\n */\nsetStyles(styles: ɵStyleData, easing: string = null) {\n    if (easing) {\n      this._previousKeyframe['easing'] = easing;\n    }\n    Object.keys(styles).forEach(prop => {\n      if (prop !== 'offset') {\n        const /** @type {?} */ val = styles[prop];\n        this._currentKeyframe[prop] = val;\n        if (!this._localTimelineStyles[prop]) {\n          this._backFill[prop] = this._globalTimelineStyles[prop] || AUTO_STYLE;\n        }\n        this._updateStyle(prop, val);\n      }\n    });\n    Object.keys(this._localTimelineStyles).forEach(prop => {\n      if (!this._currentKeyframe.hasOwnProperty(prop)) {\n        this._currentKeyframe[prop] = this._localTimelineStyles[prop];\n      }\n    });\n  }\n/**\n * @return {?}\n */\nsnapshotCurrentStyles() { copyStyles(this._localTimelineStyles, false, this._currentKeyframe); }\n/**\n * @return {?}\n */\ngetFinalKeyframe() { return this._keyframes.get(this.duration); }\n/**\n * @return {?}\n */\nget properties() {\n    const /** @type {?} */ properties: string[] = [];\n    for (let /** @type {?} */ prop in this._currentKeyframe) {\n      properties.push(prop);\n    }\n    return properties;\n  }\n/**\n * @param {?} timeline\n * @return {?}\n */\nmergeTimelineCollectedStyles(timeline: TimelineBuilder) {\n    Object.keys(timeline._styleSummary).forEach(prop => {\n      const /** @type {?} */ details0 = this._styleSummary[prop];\n      const /** @type {?} */ details1 = timeline._styleSummary[prop];\n      if (!details0 || details1.time > details0.time) {\n        this._updateStyle(prop, details1.value);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nbuildKeyframes(): AnimationTimelineInstruction {\n    const /** @type {?} */ finalKeyframes: ɵStyleData[] = [];\n    // special case for when there are only start/destination\n    // styles but no actual animation animate steps...\n    if (this.duration == 0) {\n      const /** @type {?} */ targetKeyframe = this.getFinalKeyframe();\n\n      const /** @type {?} */ firstKeyframe = copyStyles(targetKeyframe, true);\n      firstKeyframe['offset'] = 0;\n      finalKeyframes.push(firstKeyframe);\n\n      const /** @type {?} */ lastKeyframe = copyStyles(targetKeyframe, true);\n      lastKeyframe['offset'] = 1;\n      finalKeyframes.push(lastKeyframe);\n    } else {\n      this._keyframes.forEach((keyframe, time) => {\n        const /** @type {?} */ finalKeyframe = copyStyles(keyframe, true);\n        finalKeyframe['offset'] = time / this.duration;\n        finalKeyframes.push(finalKeyframe);\n      });\n    }\n\n    return createTimelineInstruction(finalKeyframes, this.duration, this.startTime, this.easing);\n  }\n}\n\nfunction TimelineBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nTimelineBuilder.prototype.duration;\n/** @type {?} */\nTimelineBuilder.prototype.easing;\n/** @type {?} */\nTimelineBuilder.prototype._previousKeyframe;\n/** @type {?} */\nTimelineBuilder.prototype._currentKeyframe;\n/** @type {?} */\nTimelineBuilder.prototype._keyframes;\n/** @type {?} */\nTimelineBuilder.prototype._styleSummary;\n/** @type {?} */\nTimelineBuilder.prototype._localTimelineStyles;\n/** @type {?} */\nTimelineBuilder.prototype._backFill;\n/** @type {?} */\nTimelineBuilder.prototype.startTime;\n/** @type {?} */\nTimelineBuilder.prototype._globalTimelineStyles;\n}\n\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction getOffset(ast: AnimationStyleMetadata): number {\n  let /** @type {?} */ offset = ast.offset;\n  if (offset == null) {\n    const /** @type {?} */ styles = ast.styles;\n    if (Array.isArray(styles)) {\n      for (let /** @type {?} */ i = 0; i < styles.length; i++) {\n        const /** @type {?} */ o = /** @type {?} */(( styles[i]['offset'] as number));\n        if (o != null) {\n          offset = o;\n          break;\n        }\n      }\n    } else {\n      offset = /** @type {?} */(( styles['offset'] as number));\n    }\n  }\n  return offset;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationMetadata, AnimationTransitionMetadata, sequence, ɵStyleData} from '@angular/animations';\n\nimport {buildAnimationKeyframes} from './animation_timeline_visitor';\nimport {TransitionMatcherFn} from './animation_transition_expr';\nimport {AnimationTransitionInstruction, createTransitionInstruction} from './animation_transition_instruction';\nexport class AnimationTransitionFactory {\nprivate _animationAst: AnimationMetadata;\n/**\n * @param {?} _triggerName\n * @param {?} ast\n * @param {?} matchFns\n * @param {?} _stateStyles\n */\nconstructor(\nprivate _triggerName: string, ast: AnimationTransitionMetadata,\nprivate matchFns: TransitionMatcherFn[],\nprivate _stateStyles: {[stateName: string]: ɵStyleData}) {\n    const normalizedAst = Array.isArray(ast.animation) ?\n        sequence(<AnimationMetadata[]>ast.animation) :\n        <AnimationMetadata>ast.animation;\n    this._animationAst = normalizedAst;\n  }\n/**\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nmatch(currentState: any, nextState: any): AnimationTransitionInstruction {\n    if (!oneOrMoreTransitionsMatch(this.matchFns, currentState, nextState)) return;\n\n    const /** @type {?} */ backupStateStyles = this._stateStyles['*'] || {};\n    const /** @type {?} */ currentStateStyles = this._stateStyles[currentState] || backupStateStyles;\n    const /** @type {?} */ nextStateStyles = this._stateStyles[nextState] || backupStateStyles;\n\n    const /** @type {?} */ timelines =\n        buildAnimationKeyframes(this._animationAst, currentStateStyles, nextStateStyles);\n\n    return createTransitionInstruction(\n        this._triggerName, currentState, nextState, nextState === 'void', currentStateStyles,\n        nextStateStyles, timelines);\n  }\n}\n\nfunction AnimationTransitionFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTransitionFactory.prototype._animationAst;\n/** @type {?} */\nAnimationTransitionFactory.prototype._triggerName;\n/** @type {?} */\nAnimationTransitionFactory.prototype.matchFns;\n/** @type {?} */\nAnimationTransitionFactory.prototype._stateStyles;\n}\n\n/**\n * @param {?} matchFns\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nfunction oneOrMoreTransitionsMatch(\n    matchFns: TransitionMatcherFn[], currentState: any, nextState: any): boolean {\n  return matchFns.some(fn => fn(currentState, nextState));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimateTimings, AnimationAnimateMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationSequenceMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, sequence} from '@angular/animations';\n\nimport {normalizeStyles, parseTimeExpression} from '../util';\n\nimport {AnimationDslVisitor, visitAnimationNode} from './animation_dsl_visitor';\n\nexport type StyleTimeTuple = {\n  startTime: number; endTime: number;\n};\n/**\n * @param {?} ast\n * @return {?}\n */\nexport function validateAnimationSequence(ast: AnimationMetadata) {\n  const /** @type {?} */ normalizedAst =\n      Array.isArray(ast) ? sequence( /** @type {?} */((<AnimationMetadata[]>ast))) : /** @type {?} */(( <AnimationMetadata>ast));\n  return new AnimationValidatorVisitor().validate(normalizedAst);\n}\nexport class AnimationValidatorVisitor implements AnimationDslVisitor {\n/**\n * @param {?} ast\n * @return {?}\n */\nvalidate(ast: AnimationMetadata): string[] {\n    const /** @type {?} */ context = new AnimationValidatorContext();\n    visitAnimationNode(this, ast, context);\n    return context.errors;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitState(ast: AnimationStateMetadata, context: any): any {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitTransition(ast: AnimationTransitionMetadata, context: any): any {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSequence(ast: AnimationSequenceMetadata, context: AnimationValidatorContext): any {\n    ast.steps.forEach(step => visitAnimationNode(this, step, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitGroup(ast: AnimationGroupMetadata, context: AnimationValidatorContext): any {\n    const /** @type {?} */ currentTime = context.currentTime;\n    let /** @type {?} */ furthestTime = 0;\n    ast.steps.forEach(step => {\n      context.currentTime = currentTime;\n      visitAnimationNode(this, step, context);\n      furthestTime = Math.max(furthestTime, context.currentTime);\n    });\n    context.currentTime = furthestTime;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitAnimate(ast: AnimationAnimateMetadata, context: AnimationValidatorContext): any {\n    // we reassign the timings here so that they are not reparsed each\n    // time an animation occurs\n    context.currentAnimateTimings = ast.timings =\n        parseTimeExpression( /** @type {?} */((<string|number>ast.timings)), context.errors);\n\n    const /** @type {?} */ astType = ast.styles && ast.styles.type;\n    if (astType == AnimationMetadataType.KeyframeSequence) {\n      this.visitKeyframeSequence( /** @type {?} */((<AnimationKeyframesSequenceMetadata>ast.styles)), context);\n    } else {\n      context.currentTime +=\n          context.currentAnimateTimings.duration + context.currentAnimateTimings.delay;\n      if (astType == AnimationMetadataType.Style) {\n        this.visitStyle( /** @type {?} */((<AnimationStyleMetadata>ast.styles)), context);\n      }\n    }\n\n    context.currentAnimateTimings = null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitStyle(ast: AnimationStyleMetadata, context: AnimationValidatorContext): any {\n    const /** @type {?} */ styleData = normalizeStyles(ast.styles);\n    const /** @type {?} */ timings = context.currentAnimateTimings;\n    let /** @type {?} */ endTime = context.currentTime;\n    let /** @type {?} */ startTime = context.currentTime;\n    if (timings && startTime > 0) {\n      startTime -= timings.duration + timings.delay;\n    }\n    Object.keys(styleData).forEach(prop => {\n      const /** @type {?} */ collectedEntry = context.collectedStyles[prop];\n      let /** @type {?} */ updateCollectedStyle = true;\n      if (collectedEntry) {\n        if (startTime != endTime && startTime >= collectedEntry.startTime &&\n            endTime <= collectedEntry.endTime) {\n          context.errors.push(\n              `The CSS property \"${prop}\" that exists between the times of \"${collectedEntry.startTime}ms\" and \"${collectedEntry.endTime}ms\" is also being animated in a parallel animation between the times of \"${startTime}ms\" and \"${endTime}ms\"`);\n          updateCollectedStyle = false;\n        }\n\n        // we always choose the smaller start time value since we\n        // want to have a record of the entire animation window where\n        // the style property is being animated in between\n        startTime = collectedEntry.startTime;\n      }\n      if (updateCollectedStyle) {\n        context.collectedStyles[prop] = {startTime, endTime};\n      }\n    });\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyframeSequence(\n      ast: AnimationKeyframesSequenceMetadata, context: AnimationValidatorContext): any {\n    let /** @type {?} */ totalKeyframesWithOffsets = 0;\n    const /** @type {?} */ offsets: number[] = [];\n    let /** @type {?} */ offsetsOutOfOrder = false;\n    let /** @type {?} */ keyframesOutOfRange = false;\n    let /** @type {?} */ previousOffset: number = 0;\n    ast.steps.forEach(step => {\n      const /** @type {?} */ styleData = normalizeStyles(step.styles);\n      let /** @type {?} */ offset = 0;\n      if (styleData.hasOwnProperty('offset')) {\n        totalKeyframesWithOffsets++;\n        offset = /** @type {?} */(( <number>styleData['offset']));\n      }\n      keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;\n      offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;\n      previousOffset = offset;\n      offsets.push(offset);\n    });\n\n    if (keyframesOutOfRange) {\n      context.errors.push(`Please ensure that all keyframe offsets are between 0 and 1`);\n    }\n\n    if (offsetsOutOfOrder) {\n      context.errors.push(`Please ensure that all keyframe offsets are in order`);\n    }\n\n    const /** @type {?} */ length = ast.steps.length;\n    let /** @type {?} */ generatedOffset = 0;\n    if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {\n      context.errors.push(`Not all style() steps within the declared keyframes() contain offsets`);\n    } else if (totalKeyframesWithOffsets == 0) {\n      generatedOffset = 1 / length;\n    }\n\n    const /** @type {?} */ limit = length - 1;\n    const /** @type {?} */ currentTime = context.currentTime;\n    const /** @type {?} */ animateDuration = context.currentAnimateTimings.duration;\n    ast.steps.forEach((step, i) => {\n      const /** @type {?} */ offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];\n      const /** @type {?} */ durationUpToThisFrame = offset * animateDuration;\n      context.currentTime =\n          currentTime + context.currentAnimateTimings.delay + durationUpToThisFrame;\n      context.currentAnimateTimings.duration = durationUpToThisFrame;\n      this.visitStyle(step, context);\n    });\n  }\n}\nexport class AnimationValidatorContext {\npublic errors: string[] = [];\npublic currentTime: number = 0;\npublic currentAnimateTimings: AnimateTimings;\npublic collectedStyles: {[propName: string]: StyleTimeTuple} = {};\n}\n\nfunction AnimationValidatorContext_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationValidatorContext.prototype.errors;\n/** @type {?} */\nAnimationValidatorContext.prototype.currentTime;\n/** @type {?} */\nAnimationValidatorContext.prototype.currentAnimateTimings;\n/** @type {?} */\nAnimationValidatorContext.prototype.collectedStyles;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationAnimateMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationSequenceMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, ɵStyleData} from '@angular/animations';\n\nimport {copyStyles, normalizeStyles} from '../util';\n\nimport {AnimationDslVisitor, visitAnimationNode} from './animation_dsl_visitor';\nimport {parseTransitionExpr} from './animation_transition_expr';\nimport {AnimationTransitionFactory} from './animation_transition_factory';\nimport {AnimationTransitionInstruction, createTransitionInstruction} from './animation_transition_instruction';\nimport {validateAnimationSequence} from './animation_validator_visitor';\n/**\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nexport function buildTrigger(name: string, definitions: AnimationMetadata[]): AnimationTrigger {\n  return new AnimationTriggerVisitor().buildTrigger(name, definitions);\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nexport class AnimationTrigger {\npublic transitionFactories: AnimationTransitionFactory[] = [];\npublic states: {[stateName: string]: ɵStyleData} = {};\n/**\n * @param {?} name\n * @param {?} states\n * @param {?} _transitionAsts\n */\nconstructor(\npublic name: string, states: {[stateName: string]: ɵStyleData},\nprivate _transitionAsts: AnimationTransitionMetadata[]) {\n    Object.keys(states).forEach(\n        stateName => { this.states[stateName] = copyStyles(states[stateName], false); });\n\n    const errors: string[] = [];\n    _transitionAsts.forEach(ast => {\n      const exprs = parseTransitionExpr(ast.expr, errors);\n      const sequenceErrors = validateAnimationSequence(ast);\n      if (sequenceErrors.length) {\n        errors.push(...sequenceErrors);\n      } else {\n        this.transitionFactories.push(\n            new AnimationTransitionFactory(this.name, ast, exprs, states));\n      }\n    });\n\n    if (errors.length) {\n      const LINE_START = '\\n - ';\n      throw new Error(\n          `Animation parsing for the ${name} trigger have failed:${LINE_START}${errors.join(LINE_START)}`);\n    }\n  }\n/**\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\ncreateFallbackInstruction(currentState: any, nextState: any): AnimationTransitionInstruction {\n    const /** @type {?} */ backupStateStyles = this.states['*'] || {};\n    const /** @type {?} */ currentStateStyles = this.states[currentState] || backupStateStyles;\n    const /** @type {?} */ nextStateStyles = this.states[nextState] || backupStateStyles;\n    return createTransitionInstruction(\n        this.name, currentState, nextState, nextState == 'void', currentStateStyles,\n        nextStateStyles, []);\n  }\n/**\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nmatchTransition(currentState: any, nextState: any): AnimationTransitionInstruction {\n    for (let /** @type {?} */ i = 0; i < this.transitionFactories.length; i++) {\n      let /** @type {?} */ result = this.transitionFactories[i].match(currentState, nextState);\n      if (result) return result;\n    }\n  }\n}\n\nfunction AnimationTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTrigger.prototype.transitionFactories;\n/** @type {?} */\nAnimationTrigger.prototype.states;\n/** @type {?} */\nAnimationTrigger.prototype.name;\n/** @type {?} */\nAnimationTrigger.prototype._transitionAsts;\n}\n\nclass AnimationTriggerContext {\npublic errors: string[] = [];\npublic states: {[stateName: string]: ɵStyleData} = {};\npublic transitions: AnimationTransitionMetadata[] = [];\n}\n\nfunction AnimationTriggerContext_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTriggerContext.prototype.errors;\n/** @type {?} */\nAnimationTriggerContext.prototype.states;\n/** @type {?} */\nAnimationTriggerContext.prototype.transitions;\n}\n\nclass AnimationTriggerVisitor implements AnimationDslVisitor {\n/**\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nbuildTrigger(name: string, definitions: AnimationMetadata[]): AnimationTrigger {\n    const /** @type {?} */ context = new AnimationTriggerContext();\n    definitions.forEach(def => visitAnimationNode(this, def, context));\n    return new AnimationTrigger(name, context.states, context.transitions);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitState(ast: AnimationStateMetadata, context: any): any {\n    const /** @type {?} */ styles = normalizeStyles(ast.styles.styles);\n    ast.name.split(/\\s*,\\s*/).forEach(name => { context.states[name] = styles; });\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitTransition(ast: AnimationTransitionMetadata, context: any): any {\n    context.transitions.push(ast);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSequence(ast: AnimationSequenceMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitGroup(ast: AnimationGroupMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitAnimate(ast: AnimationAnimateMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitStyle(ast: AnimationStyleMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyframeSequence(ast: AnimationKeyframesSequenceMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent, AnimationPlayer, AnimationTriggerMetadata, NoopAnimationPlayer, ɵAnimationGroupPlayer, ɵStyleData} from '@angular/animations';\n\nimport {AnimationTimelineInstruction} from '../dsl/animation_timeline_instruction';\nimport {AnimationTransitionInstruction} from '../dsl/animation_transition_instruction';\nimport {AnimationTrigger, buildTrigger} from '../dsl/animation_trigger';\nimport {AnimationStyleNormalizer} from '../dsl/style_normalization/animation_style_normalizer';\nimport {eraseStyles, setStyles} from '../util';\n\nimport {AnimationDriver} from './animation_driver';\n\nexport interface QueuedAnimationTransitionTuple {\n  element: any;\n  player: AnimationPlayer;\n  triggerName: string;\n  event: AnimationEvent;\n}\n\nexport interface TriggerListenerTuple {\n  triggerName: string;\n  phase: string;\n  callback: (event: any) => any;\n}\n\nconst /** @type {?} */ MARKED_FOR_ANIMATION_CLASSNAME = 'ng-animating';\nconst /** @type {?} */ MARKED_FOR_ANIMATION_SELECTOR = '.ng-animating';\nconst /** @type {?} */ MARKED_FOR_REMOVAL = '$$ngRemove';\nexport class DomAnimationEngine {\nprivate _flaggedInserts = new Set<any>();\nprivate _queuedRemovals = new Map<any, () => any>();\nprivate _queuedTransitionAnimations: QueuedAnimationTransitionTuple[] = [];\nprivate _activeTransitionAnimations = new Map<any, {[triggerName: string]: AnimationPlayer}>();\nprivate _activeElementAnimations = new Map<any, AnimationPlayer[]>();\nprivate _elementTriggerStates = new Map<any, {[triggerName: string]: string}>();\nprivate _triggers: {[triggerName: string]: AnimationTrigger} = Object.create(null);\nprivate _triggerListeners = new Map<any, TriggerListenerTuple[]>();\nprivate _pendingListenerRemovals = new Map<any, TriggerListenerTuple[]>();\n/**\n * @param {?} _driver\n * @param {?} _normalizer\n */\nconstructor(private _driver: AnimationDriver,\nprivate _normalizer: AnimationStyleNormalizer) {}\n/**\n * @return {?}\n */\nget queuedPlayers(): AnimationPlayer[] {\n    return this._queuedTransitionAnimations.map(q => q.player);\n  }\n/**\n * @return {?}\n */\nget activePlayers(): AnimationPlayer[] {\n    const /** @type {?} */ players: AnimationPlayer[] = [];\n    this._activeElementAnimations.forEach(activePlayers => players.push(...activePlayers));\n    return players;\n  }\n/**\n * @param {?} trigger\n * @param {?=} name\n * @return {?}\n */\nregisterTrigger(trigger: AnimationTriggerMetadata, name: string = null): void {\n    name = name || trigger.name;\n    if (this._triggers[name]) {\n      return;\n    }\n    this._triggers[name] = buildTrigger(name, trigger.definitions);\n  }\n/**\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonInsert(element: any, domFn: () => any): void {\n    this._flaggedInserts.add(element);\n    domFn();\n  }\n/**\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonRemove(element: any, domFn: () => any): void {\n    let /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);\n    if (lookupRef) {\n      const /** @type {?} */ possibleTriggers = Object.keys(lookupRef);\n      const /** @type {?} */ hasRemoval = possibleTriggers.some(triggerName => {\n        const /** @type {?} */ oldValue = lookupRef[triggerName];\n        const /** @type {?} */ instruction = this._triggers[triggerName].matchTransition(oldValue, 'void');\n        return !!instruction;\n      });\n      if (hasRemoval) {\n        element[MARKED_FOR_REMOVAL] = true;\n        this._queuedRemovals.set(element, domFn);\n        return;\n      }\n    }\n\n    // this means that there are no animations to take on this\n    // leave operation therefore we should fire the done|start callbacks\n    if (this._triggerListeners.has(element)) {\n      element[MARKED_FOR_REMOVAL] = true;\n      this._queuedRemovals.set(element, () => {});\n    }\n    this._onRemovalTransition(element).forEach(player => player.destroy());\n    domFn();\n  }\n/**\n * @param {?} element\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nsetProperty(element: any, property: string, value: any): void {\n    const /** @type {?} */ trigger = this._triggers[property];\n    if (!trigger) {\n      throw new Error(`The provided animation trigger \"${property}\" has not been registered!`);\n    }\n\n    let /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);\n    if (!lookupRef) {\n      this._elementTriggerStates.set(element, lookupRef = {});\n    }\n\n    let /** @type {?} */ oldValue = lookupRef.hasOwnProperty(property) ? lookupRef[property] : 'void';\n    if (oldValue !== value) {\n      let /** @type {?} */ instruction = trigger.matchTransition(oldValue, value);\n      if (!instruction) {\n        // we do this to make sure we always have an animation player so\n        // that callback operations are properly called\n        instruction = trigger.createFallbackInstruction(oldValue, value);\n      }\n      this.animateTransition(element, instruction);\n      lookupRef[property] = value;\n    }\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} eventPhase\n * @param {?} callback\n * @return {?}\n */\nlisten(element: any, eventName: string, eventPhase: string, callback: (event: any) => any):\n      () => void {\n    if (!eventPhase) {\n      throw new Error(\n          `Unable to listen on the animation trigger \"${eventName}\" because the provided event is undefined!`);\n    }\n    if (!this._triggers[eventName]) {\n      throw new Error(\n          `Unable to listen on the animation trigger event \"${eventPhase}\" because the animation trigger \"${eventName}\" doesn't exist!`);\n    }\n    let /** @type {?} */ elementListeners = this._triggerListeners.get(element);\n    if (!elementListeners) {\n      this._triggerListeners.set(element, elementListeners = []);\n    }\n    validatePlayerEvent(eventName, eventPhase);\n    const /** @type {?} */ tuple = /** @type {?} */(( <TriggerListenerTuple>{triggerName: eventName, phase: eventPhase, callback}));\n    elementListeners.push(tuple);\n    return () => {\n      // this is queued up in the event that a removal animation is set\n      // to fire on the element (the listeners need to be set during flush)\n      getOrSetAsInMap(this._pendingListenerRemovals, element, []).push(tuple);\n    };\n  }\n/**\n * @return {?}\n */\nprivate _clearPendingListenerRemovals() {\n    this._pendingListenerRemovals.forEach((tuples: TriggerListenerTuple[], element: any) => {\n      const /** @type {?} */ elementListeners = this._triggerListeners.get(element);\n      if (elementListeners) {\n        tuples.forEach(tuple => {\n          const /** @type {?} */ index = elementListeners.indexOf(tuple);\n          if (index >= 0) {\n            elementListeners.splice(index, 1);\n          }\n        });\n      }\n    });\n    this._pendingListenerRemovals.clear();\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _onRemovalTransition(element: any): AnimationPlayer[] {\n    // when a parent animation is set to trigger a removal we want to\n    // find all of the children that are currently animating and clear\n    // them out by destroying each of them.\n    const /** @type {?} */ elms = element.querySelectorAll(MARKED_FOR_ANIMATION_SELECTOR);\n    for (let /** @type {?} */ i = 0; i < elms.length; i++) {\n      const /** @type {?} */ elm = elms[i];\n      const /** @type {?} */ activePlayers = this._activeElementAnimations.get(elm);\n      if (activePlayers) {\n        activePlayers.forEach(player => player.destroy());\n      }\n\n      const /** @type {?} */ activeTransitions = this._activeTransitionAnimations.get(elm);\n      if (activeTransitions) {\n        Object.keys(activeTransitions).forEach(triggerName => {\n          const /** @type {?} */ player = activeTransitions[triggerName];\n          if (player) {\n            player.destroy();\n          }\n        });\n      }\n    }\n\n    // we make a copy of the array because the actual source array is modified\n    // each time a player is finished/destroyed (the forEach loop would fail otherwise)\n    return copyArray(this._activeElementAnimations.get(element));\n  }\n/**\n * @param {?} element\n * @param {?} instruction\n * @return {?}\n */\nanimateTransition(element: any, instruction: AnimationTransitionInstruction): AnimationPlayer {\n    const /** @type {?} */ triggerName = instruction.triggerName;\n\n    let /** @type {?} */ previousPlayers: AnimationPlayer[];\n    if (instruction.isRemovalTransition) {\n      previousPlayers = this._onRemovalTransition(element);\n    } else {\n      previousPlayers = [];\n      const /** @type {?} */ existingTransitions = this._activeTransitionAnimations.get(element);\n      const /** @type {?} */ existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;\n      if (existingPlayer) {\n        previousPlayers.push(existingPlayer);\n      }\n    }\n\n    // it's important to do this step before destroying the players\n    // so that the onDone callback below won't fire before this\n    eraseStyles(element, instruction.fromStyles);\n\n    // we first run this so that the previous animation player\n    // data can be passed into the successive animation players\n    let /** @type {?} */ totalTime = 0;\n    const /** @type {?} */ players = instruction.timelines.map(timelineInstruction => {\n      totalTime = Math.max(totalTime, timelineInstruction.totalTime);\n      return this._buildPlayer(element, timelineInstruction, previousPlayers);\n    });\n\n    previousPlayers.forEach(previousPlayer => previousPlayer.destroy());\n    const /** @type {?} */ player = optimizeGroupPlayer(players);\n    player.onDone(() => {\n      player.destroy();\n      const /** @type {?} */ elmTransitionMap = this._activeTransitionAnimations.get(element);\n      if (elmTransitionMap) {\n        delete elmTransitionMap[triggerName];\n        if (Object.keys(elmTransitionMap).length == 0) {\n          this._activeTransitionAnimations.delete(element);\n        }\n      }\n      deleteFromArrayMap(this._activeElementAnimations, element, player);\n      setStyles(element, instruction.toStyles);\n    });\n\n    const /** @type {?} */ elmTransitionMap = getOrSetAsInMap(this._activeTransitionAnimations, element, {});\n    elmTransitionMap[triggerName] = player;\n\n    this._queuePlayer(\n        element, triggerName, player,\n        makeAnimationEvent(\n            element, triggerName, instruction.fromState, instruction.toState,\n            null,  // this will be filled in during event creation\n            totalTime));\n\n    return player;\n  }\n/**\n * @param {?} element\n * @param {?} instructions\n * @param {?=} previousPlayers\n * @return {?}\n */\npublic animateTimeline(\n      element: any, instructions: AnimationTimelineInstruction[],\n      previousPlayers: AnimationPlayer[] = []): AnimationPlayer {\n    const /** @type {?} */ players = instructions.map(instruction => {\n      const /** @type {?} */ player = this._buildPlayer(element, instruction, previousPlayers);\n      player.onDestroy(\n          () => { deleteFromArrayMap(this._activeElementAnimations, element, player); });\n      player.init();\n\n      this._markPlayerAsActive(element, player);\n      return player;\n    });\n    return optimizeGroupPlayer(players);\n  }\n/**\n * @param {?} element\n * @param {?} instruction\n * @param {?} previousPlayers\n * @return {?}\n */\nprivate _buildPlayer(\n      element: any, instruction: AnimationTimelineInstruction,\n      previousPlayers: AnimationPlayer[]): AnimationPlayer {\n    return this._driver.animate(\n        element, this._normalizeKeyframes(instruction.keyframes), instruction.duration,\n        instruction.delay, instruction.easing, previousPlayers);\n  }\n/**\n * @param {?} keyframes\n * @return {?}\n */\nprivate _normalizeKeyframes(keyframes: ɵStyleData[]): ɵStyleData[] {\n    const /** @type {?} */ errors: string[] = [];\n    const /** @type {?} */ normalizedKeyframes: ɵStyleData[] = [];\n    keyframes.forEach(kf => {\n      const /** @type {?} */ normalizedKeyframe: ɵStyleData = {};\n      Object.keys(kf).forEach(prop => {\n        let /** @type {?} */ normalizedProp = prop;\n        let /** @type {?} */ normalizedValue = kf[prop];\n        if (prop != 'offset') {\n          normalizedProp = this._normalizer.normalizePropertyName(prop, errors);\n          normalizedValue =\n              this._normalizer.normalizeStyleValue(prop, normalizedProp, kf[prop], errors);\n        }\n        normalizedKeyframe[normalizedProp] = normalizedValue;\n      });\n      normalizedKeyframes.push(normalizedKeyframe);\n    });\n    if (errors.length) {\n      const /** @type {?} */ LINE_START = '\\n - ';\n      throw new Error(\n          `Unable to animate due to the following errors:${LINE_START}${errors.join(LINE_START)}`);\n    }\n    return normalizedKeyframes;\n  }\n/**\n * @param {?} element\n * @param {?} player\n * @return {?}\n */\nprivate _markPlayerAsActive(element: any, player: AnimationPlayer) {\n    const /** @type {?} */ elementAnimations = getOrSetAsInMap(this._activeElementAnimations, element, []);\n    elementAnimations.push(player);\n  }\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} player\n * @param {?} event\n * @return {?}\n */\nprivate _queuePlayer(\n      element: any, triggerName: string, player: AnimationPlayer, event: AnimationEvent) {\n    const /** @type {?} */ tuple = /** @type {?} */(( <QueuedAnimationTransitionTuple>{element, player, triggerName, event}));\n    this._queuedTransitionAnimations.push(tuple);\n    player.init();\n\n    element.classList.add(MARKED_FOR_ANIMATION_CLASSNAME);\n    player.onDone(() => { element.classList.remove(MARKED_FOR_ANIMATION_CLASSNAME); });\n  }\n/**\n * @return {?}\n */\nprivate _flushQueuedAnimations() {\n    parentLoop: while (this._queuedTransitionAnimations.length) {\n      const {player, element, triggerName, event} = this._queuedTransitionAnimations.shift();\n\n      let /** @type {?} */ parent = element;\n      while (parent = parent.parentNode) {\n        // this means that a parent element will or will not\n        // have its own animation operation which in this case\n        // there's no point in even trying to do an animation\n        if (parent[MARKED_FOR_REMOVAL]) continue parentLoop;\n      }\n\n      const /** @type {?} */ listeners = this._triggerListeners.get(element);\n      if (listeners) {\n        listeners.forEach(tuple => {\n          if (tuple.triggerName == triggerName) {\n            listenOnPlayer(player, tuple.phase, event, tuple.callback);\n          }\n        });\n      }\n\n      // if a removal exists for the given element then we need cancel\n      // all the queued players so that a proper removal animation can go\n      if (this._queuedRemovals.has(element)) {\n        player.destroy();\n        continue;\n      }\n\n      this._markPlayerAsActive(element, player);\n\n      // in the event that an animation throws an error then we do\n      // not want to re-run animations on any previous animations\n      // if they have already been kicked off beforehand\n      if (!player.hasStarted()) {\n        player.play();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nflush() {\n    const /** @type {?} */ leaveListeners = new Map<any, TriggerListenerTuple[]>();\n    this._queuedRemovals.forEach((callback, element) => {\n      const /** @type {?} */ tuple = this._pendingListenerRemovals.get(element);\n      if (tuple) {\n        leaveListeners.set(element, tuple);\n        this._pendingListenerRemovals.delete(element);\n      }\n    });\n\n    this._clearPendingListenerRemovals();\n    this._pendingListenerRemovals = leaveListeners;\n\n    this._flushQueuedAnimations();\n\n    let /** @type {?} */ flushAgain = false;\n    this._queuedRemovals.forEach((callback, element) => {\n      // an item that was inserted/removed in the same flush means\n      // that an animation should not happen anyway\n      if (this._flaggedInserts.has(element)) return;\n\n      let /** @type {?} */ parent = element;\n      let /** @type {?} */ players: AnimationPlayer[] = [];\n      while (parent = parent.parentNode) {\n        // there is no reason to even try to\n        if (parent[MARKED_FOR_REMOVAL]) {\n          callback();\n          return;\n        }\n\n        const /** @type {?} */ match = this._activeElementAnimations.get(parent);\n        if (match) {\n          players.push(...match);\n          break;\n        }\n      }\n\n      // the loop was unable to find an parent that is animating even\n      // though this element has set to be removed, so the algorithm\n      // should check to see if there are any triggers on the element\n      // that are present to handle a leave animation and then setup\n      // those players to facilitate the callback after done\n      if (players.length == 0) {\n        // this means that the element has valid state triggers\n        const /** @type {?} */ stateDetails = this._elementTriggerStates.get(element);\n        if (stateDetails) {\n          Object.keys(stateDetails).forEach(triggerName => {\n            flushAgain = true;\n            const /** @type {?} */ oldValue = stateDetails[triggerName];\n            const /** @type {?} */ instruction = this._triggers[triggerName].matchTransition(oldValue, 'void');\n            if (instruction) {\n              players.push(this.animateTransition(element, instruction));\n            } else {\n              const /** @type {?} */ event = makeAnimationEvent(element, triggerName, oldValue, 'void', '', 0);\n              const /** @type {?} */ player = new NoopAnimationPlayer();\n              this._queuePlayer(element, triggerName, player, event);\n            }\n          });\n        }\n      }\n\n      if (players.length) {\n        optimizeGroupPlayer(players).onDone(callback);\n      } else {\n        callback();\n      }\n    });\n\n    this._queuedRemovals.clear();\n    this._flaggedInserts.clear();\n\n    // this means that one or more leave animations were detected\n    if (flushAgain) {\n      this._flushQueuedAnimations();\n      this._clearPendingListenerRemovals();\n    }\n  }\n}\n\nfunction DomAnimationEngine_tsickle_Closure_declarations() {\n/** @type {?} */\nDomAnimationEngine.prototype._flaggedInserts;\n/** @type {?} */\nDomAnimationEngine.prototype._queuedRemovals;\n/** @type {?} */\nDomAnimationEngine.prototype._queuedTransitionAnimations;\n/** @type {?} */\nDomAnimationEngine.prototype._activeTransitionAnimations;\n/** @type {?} */\nDomAnimationEngine.prototype._activeElementAnimations;\n/** @type {?} */\nDomAnimationEngine.prototype._elementTriggerStates;\n/** @type {?} */\nDomAnimationEngine.prototype._triggers;\n/** @type {?} */\nDomAnimationEngine.prototype._triggerListeners;\n/** @type {?} */\nDomAnimationEngine.prototype._pendingListenerRemovals;\n/** @type {?} */\nDomAnimationEngine.prototype._driver;\n/** @type {?} */\nDomAnimationEngine.prototype._normalizer;\n}\n\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} defaultValue\n * @return {?}\n */\nfunction getOrSetAsInMap(map: Map<any, any>, key: any, defaultValue: any) {\n  let /** @type {?} */ value = map.get(key);\n  if (!value) {\n    map.set(key, value = defaultValue);\n  }\n  return value;\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction deleteFromArrayMap(map: Map<any, any[]>, key: any, value: any) {\n  let /** @type {?} */ arr = map.get(key);\n  if (arr) {\n    const /** @type {?} */ index = arr.indexOf(value);\n    if (index >= 0) {\n      arr.splice(index, 1);\n      if (arr.length == 0) {\n        map.delete(key);\n      }\n    }\n  }\n}\n/**\n * @param {?} players\n * @return {?}\n */\nfunction optimizeGroupPlayer(players: AnimationPlayer[]): AnimationPlayer {\n  switch (players.length) {\n    case 0:\n      return new NoopAnimationPlayer();\n    case 1:\n      return players[0];\n    default:\n      return new ɵAnimationGroupPlayer(players);\n  }\n}\n/**\n * @param {?} source\n * @return {?}\n */\nfunction copyArray(source: any[]): any[] {\n  return source ? source.splice(0) : [];\n}\n/**\n * @param {?} triggerName\n * @param {?} eventName\n * @return {?}\n */\nfunction validatePlayerEvent(triggerName: string, eventName: string) {\n  switch (eventName) {\n    case 'start':\n    case 'done':\n      return;\n    default:\n      throw new Error(\n          `The provided animation trigger event \"${eventName}\" for the animation trigger \"${triggerName}\" is not supported!`);\n  }\n}\n/**\n * @param {?} player\n * @param {?} eventName\n * @param {?} baseEvent\n * @param {?} callback\n * @return {?}\n */\nfunction listenOnPlayer(\n    player: AnimationPlayer, eventName: string, baseEvent: AnimationEvent,\n    callback: (event: any) => any) {\n  switch (eventName) {\n    case 'start':\n      player.onStart(() => {\n        const /** @type {?} */ event = copyAnimationEvent(baseEvent);\n        event.phaseName = 'start';\n        callback(event);\n      });\n      break;\n    case 'done':\n      player.onDone(() => {\n        const /** @type {?} */ event = copyAnimationEvent(baseEvent);\n        event.phaseName = 'done';\n        callback(event);\n      });\n      break;\n  }\n}\n/**\n * @param {?} e\n * @return {?}\n */\nfunction copyAnimationEvent(e: AnimationEvent): AnimationEvent {\n  return makeAnimationEvent(\n      e.element, e.triggerName, e.fromState, e.toState, e.phaseName, e.totalTime);\n}\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} phaseName\n * @param {?} totalTime\n * @return {?}\n */\nfunction makeAnimationEvent(\n    element: any, triggerName: string, fromState: string, toState: string, phaseName: string,\n    totalTime: number): AnimationEvent {\n  return /** @type {?} */(( <AnimationEvent>{element, triggerName, fromState, toState, phaseName, totalTime}));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationMetadata, AnimationPlayer, AnimationStyleMetadata, sequence, ɵStyleData} from '@angular/animations';\n\nimport {AnimationDriver} from '../render/animation_driver';\nimport {DomAnimationEngine} from '../render/dom_animation_engine';\nimport {normalizeStyles} from '../util';\n\nimport {AnimationTimelineInstruction} from './animation_timeline_instruction';\nimport {buildAnimationKeyframes} from './animation_timeline_visitor';\nimport {validateAnimationSequence} from './animation_validator_visitor';\nimport {AnimationStyleNormalizer} from './style_normalization/animation_style_normalizer';\nexport class Animation {\nprivate _animationAst: AnimationMetadata;\n/**\n * @param {?} input\n */\nconstructor(input: AnimationMetadata|AnimationMetadata[]) {\n    const ast =\n        Array.isArray(input) ? sequence(<AnimationMetadata[]>input) : <AnimationMetadata>input;\n    const errors = validateAnimationSequence(ast);\n    if (errors.length) {\n      const errorMessage = `animation validation failed:\\n${errors.join(\"\\n\")}`;\n      throw new Error(errorMessage);\n    }\n    this._animationAst = ast;\n  }\n/**\n * @param {?} startingStyles\n * @param {?} destinationStyles\n * @return {?}\n */\nbuildTimelines(\n      startingStyles: ɵStyleData|ɵStyleData[],\n      destinationStyles: ɵStyleData|ɵStyleData[]): AnimationTimelineInstruction[] {\n    const /** @type {?} */ start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : /** @type {?} */((\n                                                  <ɵStyleData>startingStyles));\n    const /** @type {?} */ dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : /** @type {?} */((\n                                                    <ɵStyleData>destinationStyles));\n    return buildAnimationKeyframes(this._animationAst, start, dest);\n  }\n/**\n * @param {?} injector\n * @param {?} element\n * @param {?=} startingStyles\n * @param {?=} destinationStyles\n * @return {?}\n */\nprivate create(\n      injector: any, element: any, startingStyles: ɵStyleData = {},\n      destinationStyles: ɵStyleData = {}): AnimationPlayer {\n    const /** @type {?} */ instructions = this.buildTimelines(startingStyles, destinationStyles);\n\n    // note the code below is only here to make the tests happy (once the new renderer is\n    // within core then the code below will interact with Renderer.transition(...))\n    const /** @type {?} */ driver: AnimationDriver = injector.get(AnimationDriver);\n    const /** @type {?} */ normalizer: AnimationStyleNormalizer = injector.get(AnimationStyleNormalizer);\n    const /** @type {?} */ engine = new DomAnimationEngine(driver, normalizer);\n    return engine.animateTimeline(element, instructions);\n  }\n}\n\nfunction Animation_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimation.prototype._animationAst;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationStyleNormalizer} from './animation_style_normalizer';\nexport class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n/**\n * @param {?} propertyName\n * @param {?} errors\n * @return {?}\n */\nnormalizePropertyName(propertyName: string, errors: string[]): string {\n    return dashCaseToCamelCase(propertyName);\n  }\n/**\n * @param {?} userProvidedProperty\n * @param {?} normalizedProperty\n * @param {?} value\n * @param {?} errors\n * @return {?}\n */\nnormalizeStyleValue(\n      userProvidedProperty: string, normalizedProperty: string, value: string|number,\n      errors: string[]): string {\n    let /** @type {?} */ unit: string = '';\n    const /** @type {?} */ strVal = value.toString().trim();\n\n    if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n      if (typeof value === 'number') {\n        unit = 'px';\n      } else {\n        const /** @type {?} */ valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n          errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n        }\n      }\n    }\n    return strVal + unit;\n  }\n}\n\nconst /** @type {?} */ DIMENSIONAL_PROP_MAP = makeBooleanMap(\n    'width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent'\n        .split(','));\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction makeBooleanMap(keys: string[]): {[key: string]: boolean} {\n  const /** @type {?} */ map: {[key: string]: boolean} = {};\n  keys.forEach(key => map[key] = true);\n  return map;\n}\n\nconst /** @type {?} */ DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: any[]) => m[1].toUpperCase());\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵStyleData} from '@angular/animations';\nimport {AnimationEngineInstruction, AnimationTransitionInstructionType} from '../render/animation_engine_instruction';\nimport {AnimationTimelineInstruction} from './animation_timeline_instruction';\n\nexport interface AnimationTransitionInstruction extends AnimationEngineInstruction {\n  triggerName: string;\n  isRemovalTransition: boolean;\n  fromState: string;\n  fromStyles: ɵStyleData;\n  toState: string;\n  toStyles: ɵStyleData;\n  timelines: AnimationTimelineInstruction[];\n}\n/**\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} isRemovalTransition\n * @param {?} fromStyles\n * @param {?} toStyles\n * @param {?} timelines\n * @return {?}\n */\nexport function createTransitionInstruction(\n    triggerName: string, fromState: string, toState: string, isRemovalTransition: boolean,\n    fromStyles: ɵStyleData, toStyles: ɵStyleData,\n    timelines: AnimationTimelineInstruction[]): AnimationTransitionInstruction {\n  return {\n    type: AnimationTransitionInstructionType.TransitionAnimation,\n    triggerName,\n    isRemovalTransition,\n    fromState,\n    fromStyles,\n    toState,\n    toStyles,\n    timelines\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationPlayer, NoopAnimationPlayer} from '@angular/animations';\n\n\n\n/**\n * @experimental\n */\nexport class NoopAnimationDriver implements AnimationDriver {\n  animate(\n      element: any, keyframes: {[key: string]: string | number}[], duration: number, delay: number,\n      easing: string, previousPlayers: any[] = []): AnimationPlayer {\n    return new NoopAnimationPlayer();\n  }\n}\n\n/**\n * @experimental\n */\nexport abstract class AnimationDriver {\n  static NOOP: AnimationDriver = new NoopAnimationDriver();\n  abstract animate(\n      element: any, keyframes: {[key: string]: string | number}[], duration: number, delay: number,\n      easing: string, previousPlayers?: any[]): any;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationAnimateMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationSequenceMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata} from '@angular/animations';\n\nexport interface AnimationDslVisitor {\n  visitState(ast: AnimationStateMetadata, context: any): any;\n  visitTransition(ast: AnimationTransitionMetadata, context: any): any;\n  visitSequence(ast: AnimationSequenceMetadata, context: any): any;\n  visitGroup(ast: AnimationGroupMetadata, context: any): any;\n  visitAnimate(ast: AnimationAnimateMetadata, context: any): any;\n  visitStyle(ast: AnimationStyleMetadata, context: any): any;\n  visitKeyframeSequence(ast: AnimationKeyframesSequenceMetadata, context: any): any;\n}\n/**\n * @param {?} visitor\n * @param {?} node\n * @param {?} context\n * @return {?}\n */\nexport function visitAnimationNode(\n    visitor: AnimationDslVisitor, node: AnimationMetadata, context: any) {\n  switch (node.type) {\n    case AnimationMetadataType.State:\n      return visitor.visitState( /** @type {?} */((<AnimationStateMetadata>node)), context);\n    case AnimationMetadataType.Transition:\n      return visitor.visitTransition( /** @type {?} */((<AnimationTransitionMetadata>node)), context);\n    case AnimationMetadataType.Sequence:\n      return visitor.visitSequence( /** @type {?} */((<AnimationSequenceMetadata>node)), context);\n    case AnimationMetadataType.Group:\n      return visitor.visitGroup( /** @type {?} */((<AnimationGroupMetadata>node)), context);\n    case AnimationMetadataType.Animate:\n      return visitor.visitAnimate( /** @type {?} */((<AnimationAnimateMetadata>node)), context);\n    case AnimationMetadataType.KeyframeSequence:\n      return visitor.visitKeyframeSequence( /** @type {?} */((<AnimationKeyframesSequenceMetadata>node)), context);\n    case AnimationMetadataType.Style:\n      return visitor.visitStyle( /** @type {?} */((<AnimationStyleMetadata>node)), context);\n    default:\n      throw new Error(`Unable to resolve animation metadata node #${node.type}`);\n  }\n}\n"],"names":["listeners","this","_listeners","set","element","handleListener","listener","data","phase","eventPhase","event","makeAnimationEvent$1","triggerName","oldValue","newValue","onStartCallbacks","push","callback","onDoneCallbacks","_changes","forEach","change","_this","get","_flaggedRemovals","storageProp","DEFAULT_STATE_VALUE","Array","from","keys","listenersToKeep","filter","l","doRemove","length","fn","clear","_onDoneFns","WebAnimationsPlayer","keyframes","options","previousPlayers","_onStartFns","_onDestroyFns","_initialized","_finished","_started","_destroyed","time","_duration","_delay","previousStyles","player","Object","styles","prop","prototype","_onFinish","init","map","formattedKeyframe","index","value","_angular_animations","AUTO_STYLE","_computeStyle","undefined","previousStyleProps","missingStyleProps_1","startingKeyframe_1","self_1","_loop_3","kf","i","_triggerWebAnimation","onStart","onDone","onDestroy","hasStarted","finish","_player","reset","_resetDomPlayerState","play","setPosition","p","currentTime","getPosition","_captureStyles","_finalKeyframe","WebAnimationsDriver","animate","duration","delay","easing","playerOptions","previousWebAnimationPlayers","AnimationEngine","flush","ONE_SECOND","ANY_STATE","AnimationTimelineContext","errors","timelines","previousNode","currentTimeline","initialTimeline","TimelineBuilder","context","fork","transformIntoNewTimeline","newTime","AnimationTimelineVisitor","buildKeyframes","ast","startingStyles","finalStyles","setStyles","visitAnimationNode","normalizedFinalStyles","copyStyles","getFinalKeyframe","val","timelineInstructions","timeline","subContextCount","type","forwardFrame","snapshotCurrentStyles","furthestTime","steps","s","innerContext","createSubContext","visitAnimate","timings","hasOwnProperty","parseTimeExpression","currentAnimateTimings","incrementTime","astType","visitKeyframeSequence","styleAst","visitStyle","MAX_KEYFRAME_OFFSET","limit","firstKeyframe","offsetGap","containsOffsets","getOffset","startTime","step","offset","parseFloat","normalizedStyles","innerTimeline","forwardTime","_applyStyles","_globalTimelineStyles","_backFill","hasStyling","_keyframes","size","_currentKeyframe","_updateStyle","_previousKeyframe","_localTimelineStyles","defineProperty","properties","configurable","details0","_styleSummary","details1","finalKeyframes","targetKeyframe","lastKeyframe","finalKeyframe","normalizedAst","isArray","animation","AnimationTransitionFactory","match","currentState","nextState","AnimationValidatorVisitor","validate","visitGroup","styleData","normalizeStyles","endTime","updateCollectedStyle","collectedEntry","totalKeyframesWithOffsets","offsets","offsetsOutOfOrder","keyframesOutOfRange","previousOffset","generatedOffset","animateDuration","durationUpToThisFrame","AnimationTrigger","name","states","_transitionAsts","transitionFactories","stateName","exprs","parseTransitionExpr","expr","sequenceErrors","validateAnimationSequence","apply","backupStateStyles","matchTransition","result","AnimationTriggerContext","AnimationTriggerVisitor","MARKED_FOR_REMOVAL","DomAnimationEngine","_driver","_normalizer","_activeTransitionAnimations","Map","_activeElementAnimations","_triggers","create","players","onRemove","domFn","lookupRef","_elementTriggerStates","possibleTriggers","hasRemoval","some","instruction","_queuedRemovals","setProperty","property","trigger","listen","eventName","Error","elementListeners","_triggerListeners","tuple","getOrSetAsInMap","_pendingListenerRemovals","_clearPendingListenerRemovals","tuples","_onRemovalTransition","elms","querySelectorAll","MARKED_FOR_ANIMATION_SELECTOR","_loop_1","elm","activePlayers","this_1","destroy","activeTransitions","animateTransition","isRemovalTransition","existingPlayer","existingTransitions","eraseStyles","fromStyles","totalTime","timelineInstruction","Math","max","_buildPlayer","previousPlayer","optimizeGroupPlayer","elmTransitionMap","delete","animateTimeline","instructions","_normalizeKeyframes","normalizedKeyframes","normalizedKeyframe","normalizedProp","normalizedValue","normalizePropertyName","normalizeStyleValue","LINE_START","_queuePlayer","_queuedTransitionAnimations","classList","add","MARKED_FOR_ANIMATION_CLASSNAME","_flushQueuedAnimations","_loop_2","_a","this_2","shift","parent","parentNode","listenOnPlayer","has","parentLoop","state_1","leaveListeners","flushAgain","_flaggedInserts","stateDetails_1","makeAnimationEvent","NoopAnimationPlayer","NoopAnimationStyleNormalizer","userProvidedProperty","normalizedProperty","Animation","errorMessage","join","injector","destinationStyles","buildTimelines","normalizer","AnimationStyleNormalizer","WebAnimationsStyleNormalizer","_super","unit","strVal","toString","trim","DIMENSIONAL_PROP_MAP","valAndSuffixMatch","makeBooleanMap","split","DASH_CASE_REGEXP","DEFAULT_STATE_STYLES","Set","NoopAnimationEngine","registerTrigger","_triggerStyles","stateMap","stateDef","makeStorageProp","triggerStateStyles","fromStateStyles","createTransitionInstruction","fromState","toState","toStyles","matchFns","sequence","deleteFromArrayMap","key","arr","baseEvent","copyAnimationEvent","phaseName","input","replace","m","_i","arguments","toUpperCase","window","getComputedStyle","_copyKeyframeStyles","__extends","d","b","__","constructor","NoopAnimationDriver","createTimelineInstruction","o","visitor","node","visitState","visitTransition","visitSequence","transitionValue","expressions","parseInnerTransitionStr","eventStr","parseAnimationAlias","isFullAnyStateExpr","alias","exp","regex","matches","durationMatch","durationUnit","floor","delayMatch","delayUnit","delayVal","readPrototype","destination"],"mappings":"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"}